
@model Web.Models.RoleModel
@{
    ViewBag.Title = "Roles Awaiting Approval";
}
@section breadcrumb {
    <li class="breadcrumb-item active" aria-current="page">Roles Awaiting Approval</li>
}

@using Web.Extensions
@Html.MessageLabel()
@using (Html.BeginForm("Approval", "Roles", FormMethod.Post, new { id = "form1" }))
{

    <section class="content">
        <div class="row">
            <div class="col-12">
                <div class="box box-solid bg-dark">
                    <div class="box-header with-border">
                        <h3 class="box-title">Admin Approval for Roles</h3>
                        <h6 class="box-subtitle">The Roles when assigned to administrators has to be approved by a SUPER ADMIN, you can export to Copy, CSV, Excel, PDF & Print</h6>
                    </div>

                    <div class="box-body">
                        @*<div style="text-align:center;">
                            <a href="#" data-toggle="tooltip" data-placement="top" title="Add New Role" class="btn btn-sm btn-primary add-button" id="AddNew"><i class="fa fa-plus"></i>&nbsp; Add New Role</a>
                        </div>*@
                        <div class="table-responsive">
                            <table id="example" class="table table-bordered table-hover display nowrap margin-top-10 w-p100">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Active</th>
                                        <th>Approved</th>
                                        <th>Created By</th>
                                        <th>Date Created</th>
                                        <th>Date Modified</th>
                                        <th class="no-sort"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.RoleItems)
                                    {
                                        <tr>
                                            <td><a href="javascript:;" data-id="@item.Id" class="view-butto">@item.Name</a></td>
                                            <td>@item.Description</td>
                                            <td>@item.Active</td>
                                            <td>@item.Approved</td>
                                            <td>@item.AddedBy</td>
                                            <td>@String.Format("{0:dd-MMM-yyyy HH:mm}", @item.AddedDate)</td>
                                            <td>@String.Format("{0:dd-MMM-yyyy HH:mm}", @item.ModifiedDate)</td>
                                            <td>
                                                <a href="javascript:;" data-id="@item.Id" class="btn btn-sm btn-primary approve-button" title="Approve Roles" data-toggle="modal" data-target="#modaldemo1"><i class="fa fa-arrow-up"></i></a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>


   

    <div id="modaldemo1" class="modal fade effect-rotate-left" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <form>
                    <div class="modal-header">
                        <h6 class="tx-14 mg-b-0 tx-uppercase tx-inverse tx-bold" id="modal-header-text"></h6>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body wd-800 my-modal-body">
                        <input id="Mode" type="hidden" value="NEW" />
                        <input id="HdnId" type="hidden" name="HdnId" value="0" />
                        <input id="RoleId" type="hidden" name="Id" value="0" />

                        <div class="row">
                            <div class="form-group col-lg-6">
                                <label for="bank" class="col-form-label">  Name: <span class="tx-danger">*</span></label>
                                <span id="RoleName" class="form-control" />
                            </div>
                            <div class="form-group col-lg-6">
                                <label for="DisplayName" class="col-form-label"> Description: <span class="tx-danger">*</span></label>
                                <span id="RoleDescription" class="form-control" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-6">
                                <label for="Mobile" class="col-form-label">  Active ?: </label>
                                <label class="checkbox-inline">
                                    <input id="Active" type="checkbox" name="Active" />
                                </label>
                            </div>
                        </div>
                        <div class="row col-lg-12">
                            @if (Model.SubMenuItems != null)
                            {
                                <table class="table table-striped table-bordered wd-500" id="PrivGrid">
                                    <thead>
                                        <tr>
                                            <th>Menu</th>
                                            <th>Privileges</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var group in Model.SubMenuItems.GroupBy(item => item.MenuName))
                                        {
                                            foreach (var title in group.Take(1))
                                            {
                                                <tr>
                                                    <td colspan="2" style="font-weight:bold; background-color:#eee" align="center">@title.MenuName</td>
                                                </tr>
                                            }
                                            foreach (var item in group)
                                            {
                                                <tr>
                                                    <td>@item.Name</td>
                                                    <td>
                                                        <input id="sub-privilege" type="checkbox" class="form-contro sub-privilege" data-submenu-id="@item.Id" />
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" id="SaveButton" class="btn btn-primary">Approve</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>


}

<script type="text/javascript">
    $(document).ready(function () {
        var _Form = $('#form1');

        $('#payment').find('.approve-button').each(function () {
            $(this).click(function (e) {
                e.preventDefault();
                _Form[0].reset();
                showWait();
                msgbox = $('#msgbox2', _Form);
                var _id = $(this).data('id');
                var ajaxRequest = $.ajax({
                    type: "GET",
                    url: "/api/user/fetch-role?Id=" + _id,
                    contentType: "application/json; charset=utf-8",
                    async: true,
                    success: function (response) {
                        if (response.Name != null && response.Name != '') {
                            $('#RoleId').val(response.ID);
                            $('#RoleName').text(response.Name);
                            $('#RoleDescription').text(response.Description);
                            //$('#UserCategory').text(response.UserCategory);
                            $('#Active').text(response.Active ? 'Yes' : 'No');
                            $('#PrivGrid').find(".sub-privilege").each(function () {
                                $(this).attr('disabled', true);
                            });
                            if (response.Submenus != null && response.Submenus.length > 0) {
                                for (index = 0; index < response.Submenus.length; index++) {
                                    var cntr = $("input[data-submenu-id='" + response.Submenus[index].SubMenuId + "']");
                                    if (typeof cntr !== undefined && cntr.length > 0) {
                                        $(cntr).prop('checked', true);
                                    }
                                }
                            }
                            hideWait();
                            $('#modal-header-text').text('Approve Role');
                            $('#modaldemo1').modal({
                                'backdrop': 'static',
                                "keyboard": false,
                                "show": true
                            });
                        }
                        else {
                            var msg = 'Error Occurred.<br/>';
                            msg += response.ResponseMsg;
                            errorHandler(msg);
                            hideWait();
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        errorHandler(errorThrown);
                        hideWait();
                    }
                }).done(function () {

                });
            });
        });

        _Form.submit(function (e) {
            msgbox = $('#msgbox', _Form);
            e.preventDefault();
            bootbox.confirm({
                title: "Confirmation",
                message: "Are you sure you want to submit the request?",
                buttons: {
                    cancel: {
                        label: '<i class="fa fa-times"></i> Cancel',
                        //className: 'btn-danger'
                    },
                    confirm: {
                        label: '<i class="fa fa-check"></i> Confirm',
                        //: 'btn-success'
                    }
                },
                callback: function (result) {
                    if (result) {
                        RequestStarted($("#SaveButton"));
                        try {
                            $.ajax({
                                type: "GET",
                                url: "/api/user/approve-role?Id=" + $('#RoleId').val(),
                                contentType: "application/json; charset=utf-8",
                                async: true,
                                success: function (response) {
                                    if (response.ResponseCode != null && response.ResponseCode == '00') {
                                        showAlert({
                                            message: response.ResponseMsg,
                                            type: 'success',
                                            callback: function () { location.reload(); }
                                        });
                                    }
                                    else {
                                        showAlert({
                                            message: response.ResponseMsg,
                                            type: 'error',
                                            callback: RequestEnded
                                        });
                                    }
                                },
                                error: function (XMLHttpRequest, textStatus, errorThrown) {
                                    showAlert({
                                        message: response.ResponseMsg,
                                        type: 'error',
                                        callback: RequestEnded
                                    });
                                }
                            });
                        }
                        catch (e) {
                            showAlert({ message: 'Error occurred', type: 'error' });
                            RequestEnded();
                        }
                    }
                }
            });
        });

        try {

            $('#payment').DataTable({
                'order': [[0, 'asc']],
                'columnDefs': [{ 'orderable': false, 'targets': [0, 1] }],
                "language": {
                    "emptyTable": "There are no request at present.",
                    "zeroRecords": "There were no matching requests found."
                },
                "searching": false, // <-- this should be set to true
                "ordering": true, // <-- this should be set to true
                "paging": true, // <-- this should be set to true
                "pageLength": 25,
                'dom': 'Bfrtip',
                "Filter": false,
                "bLengthChange": false,
                "responsive": true,
            });
        }
        catch (e) { }

    });
</script>